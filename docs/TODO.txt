* figure out what the rules should be for inheritance
* inject into things that Guice didn't construct
  - specifically third party libraries
* figure out if there is a need to have the injector understand stages
* add line numbers to the exception messages to show where the module failed
* should we go the extra mile with annotations like Google Guice?
* do we need an implemented_by or provided_by decorators?
  - this could be useful to specify a default implementation
* singleton loading should be based on the stage
* is it possible to order the loading of the singletons?
* constant binding
* What is the Override annotation?
* Add a Singleton class decorator
* Add an ImplementedBy class decorator
* Allow module overriding like: Modules.override(Module).with(Module...)

* Better error handling
  - circular dependency checking
  - process all dependencies possible before reporting an error

* Better scope implementation
  - use separate Scoped decorators bound to a Scope in a module
  - module overrides the decorated scope
  - document the enter and exit methods

* Default providers
  - inject providers without having to actually may a new XProvider type
  - maybe something like @inject(apple=Provider(Apple))
